{
	"name": "better-memo",
	"displayName": "Better Memo",
	"description": "Automatic Comment Curation for Developers",
	"version": "2.0.3",
	"publisher": "carbonsoda",
	"author": {
		"name": "David W."
	},
	"homepage": "https://marketplace.visualstudio.com/items?itemName=carbonsoda.better-memo",
	"repository": {
		"type": "git",
		"url": "https://github.com/CarbonicSoda/vscode-better-memo"
	},
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/CarbonicSoda/vscode-better-memo/issues",
		"email": "carbonsoda@outlook.com"
	},
	"engines": {
		"vscode": "^1.80.0"
	},
	"keywords": [
		"memo",
		"comment",
		"explorer",
		"manage",
		"tag",
		"file",
		"reminder",
		"tree"
	],
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"icon": "media/icon.png",
	"main": "./dist/extension.js",
	"browser": "./dist/web/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "better-memo.switchToTagView",
				"title": "Switch to Tag View",
				"enablement": "better-memo.init && view.better-memo.memoExplorer.visible && better-memo.explorerView == file && !better-memo.noMemos",
				"icon": "$(symbol-parameter)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.switchToFileView",
				"title": "Switch to File View",
				"enablement": "better-memo.init && view.better-memo.memoExplorer.visible && better-memo.explorerView == tag && !better-memo.noMemos",
				"icon": "$(folder-library)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.reloadExplorer",
				"title": "Refresh Explorer",
				"enablement": "better-memo.init && view.better-memo.memoExplorer.visible",
				"icon": "$(refresh)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeAllMemos",
				"title": "Mark All Memos as Completed",
				"icon": "$(checklist)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.toggleExplorerFold",
				"title": "Toggle Explorer Fold",
				"enablement": "view.better-memo.memoExplorer.visible && better-memo.init && !better-memo.noMemos",
				"icon": "$(fold)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToFile",
				"title": "Navigate to File",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == file",
				"icon": "$(go-to-file)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeTag",
				"title": "Mark All Memos of Tag as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && better-memo.explorerView == tag && viewItem == tag",
				"icon": "$(check-all)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeTagNoConfirm",
				"title": "Mark All Memos of Tag as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && better-memo.explorerView == tag && viewItem == tag",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeFile",
				"title": "Mark All Memos in File as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && better-memo.explorerView == file && viewItem == file",
				"icon": "$(check-all)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeFileNoConfirm",
				"title": "Mark All Memos in File as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && better-memo.explorerView == file && viewItem == file",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToMemo",
				"title": "Navigate to Memo",
				"enablement": "focusedView == 'better-memo.memoExplorer'",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeMemo",
				"title": "Mark Memo as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == memo",
				"icon": "$(check)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.newMemoOnLine",
				"title": "New Memo on Line",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeNearestMemo",
				"title": "Mark Memo(s) Next to Cursor(s) as Completed",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToLastMemo",
				"title": "Navigate to Last Memo",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToNextMemo",
				"title": "Navigate to Next Memo",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			}
		],
		"keybindings": [
			{
				"command": "better-memo.switchToTagView",
				"when": "focusedView == 'better-memo.memoExplorer' && better-memo.explorerView == file && !better-memo.noMemos",
				"key": "Ctrl+Shift+V"
			},
			{
				"command": "better-memo.switchToFileView",
				"when": "focusedView == 'better-memo.memoExplorer' && better-memo.explorerView == tag && !better-memo.noMemos",
				"key": "Ctrl+Shift+V"
			},
			{
				"command": "better-memo.reloadExplorer",
				"when": "focusedView == 'better-memo.memoExplorer' && better-memo.init",
				"key": "Ctrl+R"
			},
			{
				"command": "better-memo.newMemoOnLine",
				"key": "Alt+M"
			},
			{
				"command": "better-memo.completeNearestMemo",
				"key": "Alt+Shift+M"
			},
			{
				"command": "better-memo.navigateToLastMemo",
				"key": "Ctrl+Alt+M Ctrl+Alt+,"
			},
			{
				"command": "better-memo.navigateToNextMemo",
				"key": "Ctrl+Alt+M Ctrl+Alt+."
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "memoExplorer",
					"title": "Memo Explorer",
					"icon": "$(output)"
				}
			]
		},
		"views": {
			"memoExplorer": [
				{
					"id": "better-memo.memoExplorer",
					"name": "Memo Explorer"
				}
			]
		},
		"menus": {
			"view/title": [
				{
					"command": "better-memo.switchToTagView",
					"when": "view == better-memo.memoExplorer && better-memo.init && better-memo.explorerView == file && !better-memo.noMemos",
					"group": "navigation@1"
				},
				{
					"command": "better-memo.switchToFileView",
					"when": "view == better-memo.memoExplorer && better-memo.init && better-memo.explorerView == tag && !better-memo.noMemos",
					"group": "navigation@1"
				},
				{
					"command": "better-memo.reloadExplorer",
					"when": "view == better-memo.memoExplorer && better-memo.init",
					"group": "navigation@2"
				},
				{
					"command": "better-memo.completeAllMemos",
					"when": "view == better-memo.memoExplorer && better-memo.init && !better-memo.noMemos",
					"group": "navigation@3"
				},
				{
					"command": "better-memo.toggleExplorerFold",
					"when": "view == better-memo.memoExplorer && better-memo.init && !better-memo.noMemos",
					"group": "navigation@4"
				}
			],
			"view/item/context": [
				{
					"command": "better-memo.navigateToFile",
					"when": "view == better-memo.memoExplorer && viewItem == file",
					"group": "inline@1"
				},
				{
					"command": "better-memo.completeTag",
					"when": "view == better-memo.memoExplorer && better-memo.explorerView == tag && viewItem == tag",
					"group": "inline@1"
				},
				{
					"command": "better-memo.completeTagNoConfirm",
					"when": "view == better-memo.memoExplorer && better-memo.explorerView == tag && viewItem == tag"
				},
				{
					"command": "better-memo.completeFile",
					"when": "view == better-memo.memoExplorer && better-memo.explorerView == file && viewItem == file",
					"group": "inline@2"
				},
				{
					"command": "better-memo.completeFileNoConfirm",
					"when": "view == better-memo.memoExplorer && better-memo.explorerView == file && viewItem == file"
				},
				{
					"command": "better-memo.completeMemo",
					"when": "view == better-memo.memoExplorer && viewItem == memo",
					"group": "inline@1"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "better-memo.memoExplorer",
				"contents": "You have not yet opened a folder.\n[Open Folder](command:workbench.action.files.openFolder)\nOpening a folder will close all currently open editors. To keep them open, [add a folder](command:workbench.action.addRootFolder) instead.",
				"when": "workspaceFolderCount == 0 && openFolderWorkspaceSupport"
			},
			{
				"view": "better-memo.memoExplorer",
				"contents": "You have not yet opened a folder.\n[Open Folder](command:workbench.action.files.openFolderViaWorkspace)\nOpening a folder will close all currently open editors. To keep them open, [add a folder](command:workbench.action.addRootFolder) instead.",
				"when": "workspaceFolderCount == 0 && !openFolderWorkspaceSupport && workbenchState == workspace"
			},
			{
				"view": "better-memo.memoExplorer",
				"contents": "Memo Explorer is loading.\nIf this is taking too long, [inspect fetcher configurations](command:workbench.action.openSettings?[\"better-memo.fetcher\"]).",
				"when": "workspaceFolderCount != 0 && !better-memo.init"
			},
			{
				"view": "better-memo.memoExplorer",
				"contents": "Oops, cannot spot any memos throughout the universe.\nConsider spicing up the place with some memos!\nIf this is not intended, \n[Reload Explorer](command:better-memo.reloadExplorer)\nor [inspect fetcher configurations](command:workbench.action.openSettings?[\"better-memo.fetcher\"]).",
				"when": "workspaceFolderCount != 0 && better-memo.init && better-memo.noMemos"
			}
		],
		"configuration": [
			{
				"title": "General",
				"order": 1,
				"properties": {
					"better-memo.general.customTags": {
						"order": 111,
						"title": "Custom Tags",
						"type": "object",
						"uniqueItems": true,
						"additionalProperties": {
							"type": "string",
							"pattern": "(?:^\\s*#?[0-9a-fA-F]{6}\\s*$)|(?:^\\s*#?[0-9a-fA-F]{3}\\s*$)"
						},
						"markdownDescription": "Defines custom colors for specified tags.\nAccepted formats are **#FFFFFF** & **#FFF**, case insensitive and **#** could be omitted.\n\nSpecified tags will always be in the *New Memo on Line* tag picker.",
						"default": {
							"TODO": "#090",
							"FIX": "#C00",
							"TEST": "#FD5",
							"DEV": "#72F",
							"REFACTOR": "#6CE"
						},
						"scope": "application"
					},
					"better-memo.general.customLangs": {
						"order": 121,
						"title": "Custom Languages",
						"type": "object",
						"additionalProperties": {
							"type": "object"
						},
						"markdownDescription": "Defines cutom languages to support.\n\nThe key will be the languageid (visible by clicking on the status bar langauge item), and the value be the comment format in it.\nValid formats are e.g. `{ \"open\": \"//\" }` and `{ \"open\": \"/*\", \"close\": \"*/\" }`.",
						"scope": "application"
					}
				}
			},
			{
				"title": "View",
				"order": 2,
				"properties": {
					"better-memo.view.defaultView": {
						"order": 211,
						"title": "Default View",
						"type": "string",
						"enum": [
							"Tag",
							"File"
						],
						"enumDescriptions": [
							"Group by memo tags.",
							"Group by memo files."
						],
						"description": "Determines how items are grouped in Memo Explorer by default.",
						"default": "Tag",
						"scope": "application"
					},
					"better-memo.view.defaultExpandPrimaryGroups": {
						"order": 221,
						"title": "Expand Primary Groups by Default",
						"type": "boolean",
						"description": "Expand Memo Explorer primary groups by default.",
						"default": true,
						"scope": "application"
					},
					"better-memo.view.defaultExpandSecondaryGroups": {
						"order": 222,
						"title": "Expand Secondary Groups by Default",
						"type": "boolean",
						"description": "Expand Memo Explorer secondary groups by default.",
						"default": true,
						"scope": "application"
					}
				}
			},
			{
				"title": "Actions",
				"order": 3,
				"properties": {
					"better-memo.actions.memoOnNewLine": {
						"order": 311,
						"title": "Always Insert New Memos on New Line",
						"type": "boolean",
						"markdownDescription": "Always insert new memos on the line above the current line when using the *New Memo on Line* command.",
						"default": true,
						"scope": "application"
					}
				}
			},
			{
				"title": "Fetcher",
				"order": 4,
				"properties": {
					"better-memo.fetcher.watch": {
						"order": 411,
						"title": "Watch",
						"type": "array",
						"items": {
							"type": "string"
						},
						"markdownDescription": "Configures Memo fetcher file watch glob pattern, for format see [glob pattern reference](https://aka.ms/vscode-glob-patterns/).",
						"default": [
							"**/*"
						],
						"uniqueItems": true,
						"scope": "application"
					},
					"better-memo.fetcher.ignore": {
						"order": 412,
						"title": "Ignore",
						"type": "array",
						"items": {
							"type": "string"
						},
						"markdownDescription": "Configures Memo fetcher file ignore glob pattern, for format see [glob pattern reference](https://aka.ms/vscode-glob-patterns/).",
						"default": [
							"**/node_modules",
							"**/out",
							"**/dist"
						],
						"uniqueItems": true,
						"scope": "application"
					},
					"better-memo.fetcher.scanDelay": {
						"order": 421,
						"title": "Scan Delay",
						"type": "integer",
						"minimum": 500,
						"maximum": 1000000,
						"description": "Configures the delay between casual document scans in ms. Casual scans only scans the currently active document and will not run if document is not changed etc.",
						"default": 2000,
						"scope": "application"
					},
					"better-memo.fetcher.cleanScanDelay": {
						"order": 422,
						"title": "Clean Scan Delay",
						"type": "integer",
						"minimum": 5000,
						"maximum": 10000000,
						"description": "Configures the delay between clean rescans in ms. This prevents potential event listener failures.",
						"default": 60000,
						"scope": "application"
					}
				}
			},
			{
				"title": "Other",
				"order": 5,
				"properties": {
					"better-memo.other.enableEditorDecorations": {
						"order": 511,
						"title": "Enable Editor Decorations",
						"type": "boolean",
						"description": "Enable document decorations such as giving memos higher font-weight and coloring tags with their corresponding colors.",
						"default": true,
						"scope": "application"
					}
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "pnpm run package",
		"compile": "pnpm run check-types && pnpm run lint && node esbuild.cjs && node esbuild.web.cjs",
		"watch": "npm-run-all -p watch:*",
		"watch:esbuild": "node esbuild.cjs --watch && node esbuild.web.cjs --watch",
		"watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
		"package": "pnpm run check-types && pnpm run lint && node esbuild.cjs --production && node esbuild.web.cjs --production",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest": "pnpm run compile-tests && pnpm run compile && pnpm run lint",
		"check-types": "tsc --noEmit",
		"lint": "eslint src",
		"test": "vscode-test",
		"run-in-browser": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. ."
	},
	"devDependencies": {
		"@types/node": "~20.17.11",
		"@types/vscode": "^1.80.0",
		"@typescript-eslint/eslint-plugin": "^8.19.0",
		"@typescript-eslint/parser": "^8.19.0",
		"@vscode/test-cli": "^0.0.10",
		"@vscode/test-electron": "^2.4.1",
		"@vscode/test-web": "^0.0.65",
		"esbuild": "^0.25.1",
		"eslint": "^9.17.0",
		"npm-run-all": "^4.1.5",
		"typescript": "^5.7.2"
	},
	"pnpm": {
		"onlyBuiltDependencies": [
			"@playwright/browser-chromium",
			"esbuild"
		]
	}
}
