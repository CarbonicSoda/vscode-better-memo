{
	"name": "better-memo",
	"displayName": "Better Memo",
	"description": "Automatic Comment Curation for Developers",
	"version": "1.0.4",
	"publisher": "carbonsoda",
	"author": {
		"name": "David W."
	},
	"homepage": "https://marketplace.visualstudio.com/items?itemName=carbonsoda.better-memo",
	"repository": {
		"type": "git",
		"url": "https://github.com/CarbonicSoda/vscode-better-memo"
	},
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/CarbonicSoda/vscode-better-memo/issues",
		"email": "carbonsoda@outlook.com"
	},
	"engines": {
		"vscode": "^1.80.0"
	},
	"keywords": [
		"memo",
		"comment",
		"explorer",
		"manage",
		"tag",
		"file",
		"reminder",
		"tree"
	],
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"icon": "media/icon.png",
	"main": "./dist/extension",
	"browser": "./dist/web-extension",
	"scripts": {
		"vscode:prepublish": "webpack --mode production",
		"compile": "webpack",
		"watch": "tsc --watch -p ./",
		"webpack-dev": "webpack --mode development --watch",
		"webpack": "webpack --mode development",
		"package": "webpack --mode production --devtool hidden-source-map",
		"pretest": "npm run compile-tests && npm run compile && npm run lint",
		"lint": "eslint src"
	},
	"devDependencies": {
		"@types/mocha": "^10.0.8",
		"@types/node": "20.x",
		"@types/vscode": "^1.80.0",
		"@typescript-eslint/eslint-plugin": "^8.7.0",
		"@typescript-eslint/parser": "^8.7.0",
		"@vscode/test-cli": "^0.0.10",
		"@vscode/test-electron": "^2.4.1",
		"clean-webpack-plugin": "^4.0.0",
		"eslint": "^9.11.1",
		"ts-loader": "^9.5.1",
		"typescript": "^5.6.2",
		"webpack": "^5.95.0",
		"webpack-cli": "^5.1.4"
	},
	"contributes": {
		"commands": [
			{
				"command": "better-memo.switchToFileView",
				"title": "Switch to File View",
				"enablement": "treeView.better-memo.memoExplorer.toggleCollapseAll && view.better-memo.memoExplorer.visible && better-memo.explorerView == Tag",
				"icon": "$(folder-library)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.switchToTagView",
				"title": "Switch to Tag View",
				"enablement": "treeView.better-memo.memoExplorer.toggleCollapseAll && view.better-memo.memoExplorer.visible && better-memo.explorerView == File",
				"icon": "$(symbol-parameter)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.reloadExplorer",
				"title": "Refresh Explorer",
				"enablement": "better-memo.explorerInitFinished && view.better-memo.memoExplorer.visible",
				"icon": "$(refresh)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeAllMemos",
				"title": "Mark All Memos as Completed",
				"icon": "$(checklist)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.expandExplorer",
				"title": "Expand Explorer",
				"enablement": "treeView.better-memo.memoExplorer.toggleCollapseAll && view.better-memo.memoExplorer.visible",
				"icon": "$(expand-all)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToFile",
				"title": "Navigate to File",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == File",
				"icon": "$(go-to-file)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeFile",
				"title": "Mark All Memos in File as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == File",
				"icon": "$(check-all)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeFileNoConfirm",
				"title": "Mark All Memos in File as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == File",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeTag",
				"title": "Mark All Memos Under Tag as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == Tag",
				"icon": "$(check-all)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeTagNoConfirm",
				"title": "Mark All Memos Under Tag as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == Tag",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToMemo",
				"title": "Navigate to Memo",
				"enablement": "focusedView == 'better-memo.memoExplorer'",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeMemo",
				"title": "Mark Memo as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == Memo",
				"icon": "$(check)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.confirmCompleteMemo",
				"title": "Confirm Completion",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == MemoCompletionPending",
				"icon": "$(trash)",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeMemoNoConfirm",
				"title": "Mark Memo as Completed",
				"enablement": "view.better-memo.memoExplorer.visible && viewItem == Memo",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.newMemoOnLine",
				"title": "New Memo on Line",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.completeMemoNextToSelection",
				"title": "Mark Memo(s) Next to Selection(s) as Completed",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToLastMemo",
				"title": "Navigate to Last Memo",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			},
			{
				"command": "better-memo.navigateToNextMemo",
				"title": "Navigate to Next Memo",
				"enablement": "editorIsOpen",
				"category": "Better Memo"
			}
		],
		"keybindings": [
			{
				"command": "better-memo.switchToFileView",
				"when": "focusedView == 'better-memo.memoExplorer' && treeView.better-memo.memoExplorer.toggleCollapseAll && better-memo.explorerView == Tag",
				"key": "Ctrl+Shift+V"
			},
			{
				"command": "better-memo.switchToTagView",
				"when": "focusedView == 'better-memo.memoExplorer' && treeView.better-memo.memoExplorer.toggleCollapseAll && better-memo.explorerView == File",
				"key": "Ctrl+Shift+V"
			},
			{
				"command": "better-memo.reloadExplorer",
				"when": "focusedView == 'better-memo.memoExplorer' && better-memo.explorerInitFinished",
				"key": "Ctrl+R"
			},
			{
				"command": "better-memo.newMemoOnLine",
				"key": "Alt+M"
			},
			{
				"command": "better-memo.completeMemoNextToSelection",
				"key": "Alt+Shift+M"
			},
			{
				"command": "better-memo.navigateToLastMemo",
				"key": "Ctrl+Alt+M Ctrl+Alt+,"
			},
			{
				"command": "better-memo.navigateToNextMemo",
				"key": "Ctrl+Alt+M Ctrl+Alt+."
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "memoExplorer",
					"title": "Memo Explorer",
					"icon": "$(output)"
				}
			]
		},
		"views": {
			"memoExplorer": [
				{
					"id": "better-memo.memoExplorer",
					"name": "Memo Explorer"
				}
			]
		},
		"menus": {
			"view/title": [
				{
					"command": "better-memo.switchToFileView",
					"when": "view.better-memo.memoExplorer.visible && better-memo.explorerInitFinished && better-memo.explorerView == Tag",
					"group": "navigation@1"
				},
				{
					"command": "better-memo.switchToTagView",
					"when": "view.better-memo.memoExplorer.visible && better-memo.explorerInitFinished && better-memo.explorerView == File",
					"group": "navigation@1"
				},
				{
					"command": "better-memo.reloadExplorer",
					"when": "view.better-memo.memoExplorer.visible && better-memo.explorerInitFinished",
					"group": "navigation@2"
				},
				{
					"command": "better-memo.completeAllMemos",
					"when": "view.better-memo.memoExplorer.visible && better-memo.explorerInitFinished && !better-memo.noFiles && !better-memo.noMemos",
					"group": "navigation@3"
				},
				{
					"command": "better-memo.expandExplorer",
					"when": "view.better-memo.memoExplorer.visible && better-memo.explorerInitFinished",
					"group": "navigation@4"
				}
			],
			"view/item/context": [
				{
					"command": "better-memo.navigateToFile",
					"when": "view.better-memo.memoExplorer.visible && viewItem == File",
					"group": "inline@1"
				},
				{
					"command": "better-memo.navigateToFile",
					"when": "view.better-memo.memoExplorer.visible && viewItem == File"
				},
				{
					"command": "better-memo.completeFile",
					"when": "view.better-memo.memoExplorer.visible && viewItem == File",
					"group": "inline@2"
				},
				{
					"command": "better-memo.completeFileNoConfirm",
					"when": "view.better-memo.memoExplorer.visible && viewItem == File"
				},
				{
					"command": "better-memo.completeTag",
					"when": "view.better-memo.memoExplorer.visible && viewItem == Tag",
					"group": "inline@1"
				},
				{
					"command": "better-memo.completeTagNoConfirm",
					"when": "view.better-memo.memoExplorer.visible && viewItem == Tag"
				},
				{
					"command": "better-memo.completeMemo",
					"when": "view.better-memo.memoExplorer.visible && viewItem == Memo",
					"group": "inline@1"
				},
				{
					"command": "better-memo.confirmCompleteMemo",
					"when": "view.better-memo.memoExplorer.visible && viewItem == MemoCompletionPending",
					"group": "inline@1"
				},
				{
					"command": "better-memo.completeMemoNoConfirm",
					"when": "view.better-memo.memoExplorer.visible && viewItem == Memo"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "better-memo.memoExplorer",
				"contents": "You have not yet opened a folder.\n[Open Folder](command:workbench.action.files.openFolderViaWorkspace)\nOpening a folder will close all currently open editors. To keep them open, [add a folder](command:workbench.action.addRootFolder) instead.",
				"when": "workspaceFolderCount == 0"
			},
			{
				"view": "better-memo.memoExplorer",
				"contents": "Memo Explorer is loading.\nIf this is taking too long, [inspect fetcher configurations](command:workbench.action.openSettings?[\"better-memo.fetcher\"]).",
				"when": "workspaceFolderCount != 0 && !better-memo.explorerInitFinished"
			},
			{
				"view": "better-memo.memoExplorer",
				"contents": "Oops, cannot spot any memos throughout the universe.\nConsider spicing up the place with some memos!\nIf this is not intended, \n[Reload Explorer](command:better-memo.reloadExplorer)\nor [inspect fetcher configurations](command:workbench.action.openSettings?[\"better-memo.fetcher\"]).",
				"when": "workspaceFolderCount != 0 && better-memo.explorerInitFinished && better-memo.noMemos"
			}
		],
		"configuration": [
			{
				"title": "General",
				"order": 1,
				"properties": {
					"better-memo.general.customTags": {
						"order": 101,
						"title": "Custom Tags",
						"type": "object",
						"uniqueItems": true,
						"additionalProperties": {
							"type": "string"
						},
						"markdownDescription": "Defines custom colors for specified tags.\nAccepted formats are **#FFFFFF** & **#FFF**, case insensitive and **#** could be omitted.\n\nSpecified tags will always be in the *New Memo on Line* tag picker.",
						"default": {
							"TODO": "#090",
							"FIX": "#C00",
							"REFACTOR": "#6CE",
							"DEV": "#72F"
						}
					}
				}
			},
			{
				"title": "View",
				"order": 2,
				"properties": {
					"better-memo.view.defaultView": {
						"order": 101,
						"title": "Default View",
						"type": "string",
						"enum": [
							"File",
							"Tag"
						],
						"enumDescriptions": [
							"Use files as main groups.",
							"Use Memo tags as main groups."
						],
						"description": "Determines how items are grouped in Memo Explorer by default.",
						"default": "File"
					},
					"better-memo.view.defaultExpandPrimaryGroups": {
						"order": 201,
						"title": "Expand Primary Groups by Default",
						"type": "boolean",
						"description": "Expand Memo Explorer primary groups by default.",
						"default": true
					},
					"better-memo.view.defaultExpandSecondaryGroups": {
						"order": 202,
						"title": "Expand Secondary Groups by Default",
						"type": "boolean",
						"description": "Expand Memo Explorer secondary groups by default.",
						"default": true
					}
				}
			},
			{
				"title": "Actions",
				"order": 3,
				"properties": {
					"better-memo.actions.askForConfirmOnMemoCompletion": {
						"order": 101,
						"title": "Ask for Confirmation on Completion of Memo",
						"type": "boolean",
						"description": "Wait for confirmation before completing a single Memo.",
						"default": false
					},
					"better-memo.actions.memoCompletionConfirmTimeout": {
						"order": 102,
						"title": "Timeout of Confirmation on Completion of Memo",
						"type": "integer",
						"markdownDescription": "The timeout before aborting a pending completion, only applies if `#better-memo.actions.askForConfirmOnMemoCompletion#` is set to **true**.",
						"default": 3000
					},
					"better-memo.actions.alwaysOpenFileOnMemoCompletion": {
						"order": 103,
						"title": "Always Open File on Completion of Memo",
						"type": "boolean",
						"description": "Always open the file after completing a single Memo.",
						"default": true
					},
					"better-memo.actions.askForConfirmOnMemosCompletion": {
						"order": 201,
						"title": "Ask for Confirmation on Completion of Memos",
						"type": "boolean",
						"description": "Wait for confirmation before completing Memos under the parent item.",
						"default": true
					},
					"better-memo.actions.removeLineIfMemoSpansLine": {
						"order": 301,
						"title": "Remove Line if Memo Spans Line",
						"type": "boolean",
						"description": "Remove line containing completed Memo if the line becomes blank.",
						"default": true
					},
					"better-memo.actions.newMemoOnNewLine": {
						"order": 401,
						"title": "Always Insert New Memos on New Line",
						"type": "boolean",
						"markdownDescription": "Always insert new Memos on the line above the current line when using the *New Memo on Line* command.",
						"default": true
					}
				}
			},
			{
				"title": "Fetcher",
				"order": 4,
				"properties": {
					"better-memo.fetcher.watch": {
						"order": 101,
						"title": "Watch",
						"type": "array",
						"items": {
							"type": "string"
						},
						"markdownDescription": "Configures Memo fetcher file watch glob pattern, for format see [glob pattern reference](https://aka.ms/vscode-glob-patterns/).",
						"default": [
							"**/*"
						]
					},
					"better-memo.fetcher.ignore": {
						"order": 102,
						"title": "Ignore",
						"type": "array",
						"items": {
							"type": "string"
						},
						"markdownDescription": "Configures Memo fetcher file ignore glob pattern, for format see [glob pattern reference](https://aka.ms/vscode-glob-patterns/).",
						"default": [
							"**/node_modules",
							"**/out",
							"**/dist"
						]
					},
					"better-memo.fetcher.scanDelay": {
						"order": 201,
						"title": "Scan Delay",
						"type": "integer",
						"minimum": 100,
						"maximum": 1000000,
						"description": "Configures the delay between casual document scans. Casual scans only scans the currently active document and will not run if document is not changed etc.",
						"default": 1000
					},
					"better-memo.fetcher.forceScanDelay": {
						"order": 202,
						"title": "Force Scan Delay",
						"type": "integer",
						"minimum": 500,
						"maximum": 5000000,
						"description": "Configures the delay between forced document scans. Forced scans will scan the currently active document without checks, to prevent cases where casual scans failed.",
						"default": 5000
					},
					"better-memo.fetcher.docsScanDelay": {
						"order": 203,
						"title": "Workspace Scan Delay",
						"type": "integer",
						"minimum": 1000,
						"maximum": 10000000,
						"description": "Configures the delay between workspace document scans. The scan scans for unwatched documents in the workspace and scans them. Though typically documents would be taken care of by event listeners, this prevents potential failures.",
						"default": 30000
					}
				}
			},
			{
				"title": "Other",
				"order": 5,
				"properties": {
					"better-memo.other.enableEditorDecorations": {
						"order": 101,
						"title": "Enable Editor Decorations",
						"type": "boolean",
						"description": "Enable document decorations such as giving Memos higher font-weight, and coloring tags with their corresponding colors.",
						"default": true
					}
				}
			}
		]
	}
}
